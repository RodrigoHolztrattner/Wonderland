////////////////////////////////////////////////////////////////////////////////
// Filename: ResourceFactory.h
////////////////////////////////////////////////////////////////////////////////
#pragma once

//////////////
// INCLUDES //
//////////////
#include "Resource.h"

///////////////
// NAMESPACE //
///////////////

/////////////
// DEFINES //
/////////////

////////////
// GLOBAL //
////////////

////////////////////////////////////////////////////////////////////////////////
// Class name: ResourceFactory
////////////////////////////////////////////////////////////////////////////////
template<typename ResourceClass>
class ResourceFactory
{
public:
	ResourceFactory() {}
	ResourceFactory(const ResourceFactory&) {}
	~ResourceFactory() {}

	// Return the amount of memory we need to create a instance of this factory
	virtual unsigned int GetMemoryAmount()
	{
		return 1;
	}

	// Create a instance
	static Resource* CreateInstance()
	{
		return new Resource;
	}

private:

};